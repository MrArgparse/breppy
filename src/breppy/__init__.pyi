import msgspec
import requests
from _typeshed import Incomplete
from pathlib import Path

PLATFORMDIRS: Incomplete
CONFIG_FOLDER: Incomplete
DEFAULT_CONFIGURATION_PATH: Incomplete
DEFAULT_ENCODING: str

class NewLuminanceCookies(msgspec.Struct, tag='new_luminance', kw_only=True):
	cid: str = ...
	sid: str = ...

class OldLuminanceCookies(msgspec.Struct, tag='old_luminance', kw_only=True):
	session: str = ...

class Payload(msgspec.Struct, kw_only=True):
	auth: str = ...
	checkonly: str = ...
	submit: str = ...
	genre_tags: str = ...
	fontfont: int = ...
	fontsize: int = ...
	MAX_FILE_SIZE: int = ...
	anonymous: int = ...

class TrackerConfig(msgspec.Struct, kw_only=True):
	url: str
	cookies: NewLuminanceCookies | OldLuminanceCookies
	payload: Payload

def guess_tracker(url: str) -> TrackerConfig: ...

class DefaultConfig(msgspec.Struct, kw_only=True):
	Emp: TrackerConfig = msgspec.field(default_factory=Incomplete)
	Ent: TrackerConfig = msgspec.field(default_factory=Incomplete)
	Pbay: TrackerConfig = msgspec.field(default_factory=Incomplete)

def get_config_path(path: Path | None = None) -> Path: ...
def load_config(path: Path | None = None) -> DefaultConfig: ...
def save_config(configuration: DefaultConfig, path: Path | None = None) -> None: ...
def load_or_create_config(path: Path | None = None) -> DefaultConfig: ...

CONFIG: Incomplete

def find_empty_keys(d: object, current_key: str = '') -> list[str]: ...

EMPTY_KEYS: Incomplete

def stringify_ints(my_dict: dict[str, str | int]) -> dict[str, str]: ...
def prepare_upload(
	bbcode: str, category: int, cover: str, taglist: str, title: str, tracker: str
) -> dict[str, str]: ...
def build(
	fname: Path, tracker: str, payload: dict[str, str] | None = None
) -> requests.models.Response: ...
def grab_collage_token(collage_url: str, tracker: str) -> str | None: ...
def collage(
	collage_id: int, torrent_url: str, tracker: str
) -> requests.models.Response: ...
def legacy_collage(
	collage_id: int, torrent_url: str, tracker: str
) -> requests.models.Response: ...
